---
import { Icon } from 'astro-icon/components'

// Timeline.astro
interface Experience {
  id: number;
  date: string;
  position: string;
  company: string;
  location: string;
  fullDate: string;
  description: string[];
  isActive: boolean;
  posts: string;
}

type ExperiencesByYear = Record<string, Experience[]>;

const experiences: Experience[] = [
  {
    id: 1,
    date: "01/2025",
    position: "Project Monitoring",
    company: "Universidad Tecnología de Pereira",
    location: "Colombia",
    fullDate: "Jan 22, 2025 - Present",
    description: [
      "Analyzed and understood an arrhythmia detection model, defining its input-output requirements and performance metrics to facilitate integration into the application.",
      "Implemented the model in a Ruby on Rails application, creating services, APIs and views that displayed cardiological results in real time.",
      "Performed project migration from legacy Rails 5.2.2 version to Rails 8.0.2, updating gems and resolving breaking changes.",
      "Provided level 2/3 support for a primary platform."
    ],
    isActive: true,
    posts: "4 achievements"
  },
  {
    id: 2,
    date: "10/2024",
    position: "Project Support",
    company: "Universidad Tecnológica de Pereira",
    location: "Pereira, Colombia",
    fullDate: "Oct 22, 2024 - Dec 15, 2024",
    description: [
      "Collaborated in the development and optimization of technical software documentation, facilitating its implementation and maintenance.",
      "Executed exhaustive tests, both functional and performance, to guarantee system stability and efficiency.",
      "Developed an automation script for dependency installation and software deployment."
    ],
    isActive: false,
    posts: "3 achievements"
  },
  {
    id: 3,
    date: "09/2023",
    position: "Course Monitor",
    company: "Universidad Tecnológica de Pereira",
    location: "Pereira, Colombia",
    fullDate: "Sep 1, 2023 - Nov 27, 2023",
    description: [
      "Collaborated closely with my professor to guide students in learning and practical application of fundamental C language concepts."
    ],
    isActive: false,
    posts: "1 achievement"
  }
];

const experiencesByYear: ExperiencesByYear = experiences.reduce<ExperiencesByYear>((acc, exp) => {
  const year = exp.date.split('/')[1] || exp.date.split('/')[0];
  if (!acc[year]) {
    acc[year] = [];
  }
  acc[year].push(exp);
  return acc;
}, {});
---

<div class="max-w-3xl mx-auto min-h-screen transition-colors" id="Experience">
  <h3 class='text-gray-900 dark:text-white text-5xl font-bold mb-8'>Experience</h3>
  
  <div class="space-y-8">
    {Object.entries(experiencesByYear).reverse().map(([year, yearExperiences]) => (
      <div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm border border-gray-200 dark:border-gray-700 transition-colors">
        <!-- Year header -->
        <div class="flex items-center gap-4 mb-6 pb-4 border-b border-gray-100 dark:border-gray-700">
          <h3 class="text-3xl font-light text-gray-600 dark:text-gray-400">{year}</h3>
          <div class="flex items-center gap-2 text-gray-400 dark:text-gray-500">
            <div class="w-3 h-3 rounded-full border-2 border-gray-300 dark:border-gray-600"></div>
            <span class="text-sm">{yearExperiences.length} position{yearExperiences.length > 1 ? 's' : ''}</span>
          </div>
        </div>
        
        <!-- Year experiences list -->
        <div class="space-y-6">
          {yearExperiences.map((exp) => (
            <div class="group">
              <!-- Date and title -->
              <div class="flex items-start gap-4 mb-3 cursor-pointer" onclick={`toggleDetails('exp-${exp.id}')`}>
                <div class="text-gray-400 dark:text-gray-500 text-sm font-mono pt-1 w-12">
                  {exp.date.split('/')[0]}
                </div>
                <div class="w-2 h-2 rounded-full bg-gray-300 dark:bg-gray-600 mt-2 group-hover:bg-blue-400 dark:group-hover:bg-blue-500 transition-colors"></div>
                <div class="flex-1">
                  <h4 class="text-lg font-medium text-gray-800 dark:text-gray-200 hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
                    {exp.position}
                  </h4>
                  <div class="flex items-center gap-2 text-gray-500 dark:text-gray-400 text-sm mt-1">
                    <span>{exp.company}</span>
                    {exp.isActive && (
                      <span class="px-2 py-0.5 bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-300 rounded-full text-xs font-medium">
                        Current
                      </span>
                    )}
                  </div>
                  <p class="text-gray-400 dark:text-gray-500 text-xs mt-1">{exp.fullDate}</p>
                </div>
                <div class="flex items-center justify-center gap-2">
                  <div class="text-gray-400 dark:text-gray-500 text-sm">
                    #{exp.posts}
                  </div>
                  <Icon name="arrow-down" size={24} class={`animate-bounce text-main-color chevron transition-transform ${exp.id === 1 ? 'rotate' : ''}`} id={`chevron-${exp.id}`} />
                </div>
              </div>
              
              <!-- Expandable description -->
              <div class="ml-20 space-y-2 hidden details-content" id={`exp-${exp.id}`}>
                {exp.description.map((desc) => (
                  <p class="text-gray-600 dark:text-gray-300 text-sm leading-relaxed pl-4 border-l-2 border-gray-100 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-500 transition-colors">
                    {desc}
                  </p>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>
    ))}
  </div>
</div>

<style>
  /* Smooth transitions */
  .group:hover .bg-gray-300 {
    @apply bg-blue-400;
  }
  
  .dark .group:hover .dark\:bg-gray-600 {
    @apply dark:bg-blue-500;
  }
  
  /* Chevron animation */
  .chevron {
    transition: transform 0.3s ease;
  }
  
  .chevron.rotate {
    transform: rotate(180deg);
  }
  
  /* Details content animation */
  .details-content {
    transition: all 0.3s ease;
    overflow: hidden;
    max-height: 0;
    opacity: 0;
  }
  
  .details-content.show {
    max-height: 500px;
    opacity: 1;
    margin-top: 0.5rem;
  }
  
  /* Responsive adjustments */
  @media (max-width: 640px) {
    .ml-20 {
      margin-left: 3rem;
    }
    
    .w-12 {
      width: 2rem;
    }
  }
</style>

<script>
  function toggleDetails(expId) {
    const details = document.getElementById(expId);
    const chevron = document.getElementById(`chevron-${expId.split('-')[1]}`);
    
    if (details && chevron) {
      details.classList.toggle('show');
      details.classList.toggle('hidden');
      chevron.classList.toggle('rotate');
    }
  }
  
  // Make toggleDetails available globally
  window.toggleDetails = toggleDetails;
</script>
